<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="8" hostname="DESKTOP-27UMDT5" failures="1" tests="1" name="Default test" time="177.46" errors="0" timestamp="2023-12-13T22:47:44 EET">
  <testcase classname="MosaferTest" name="hotelLocation" time="174.874">
    <failure type="org.openqa.selenium.NoSuchElementException" message="Unable to find element with locator By.className: eSXwxY
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: &amp;apos;4.15.0&amp;apos;, revision: &amp;apos;1d14b5521b&amp;apos;
System info: os.name: &amp;apos;Windows 10&amp;apos;, os.arch: &amp;apos;amd64&amp;apos;, os.version: &amp;apos;10.0&amp;apos;, java.version: &amp;apos;17.0.9&amp;apos;
Driver info: driver.version: RemoteWebDriver">
      <![CDATA[org.openqa.selenium.NoSuchElementException: Unable to find element with locator By.className: eSXwxY
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.15.0', revision: '1d14b5521b'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.9'
Driver info: driver.version: RemoteWebDriver
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:168)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:364)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:358)
at MosaferTest.hotelLocation(MosaferTest.java:255)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- hotelLocation -->
  <testcase classname="MosaferTest" name="QitafLogo" time="0.0">
    <ignored/>
  </testcase> <!-- QitafLogo -->
  <testcase classname="MosaferTest" name="randomWebsiteLang" time="0.0">
    <ignored/>
  </testcase> <!-- randomWebsiteLang -->
  <testcase classname="MosaferTest" name="checkDepartureDate" time="0.0">
    <ignored/>
  </testcase> <!-- checkDepartureDate -->
  <testcase classname="MosaferTest" name="checkReturnDate" time="0.0">
    <ignored/>
  </testcase> <!-- checkReturnDate -->
  <testcase classname="MosaferTest" name="testLanguage" time="0.0">
    <ignored/>
  </testcase> <!-- testLanguage -->
  <testcase classname="MosaferTest" name="checkHotelIsNotSelected" time="0.0">
    <ignored/>
  </testcase> <!-- checkHotelIsNotSelected -->
  <testcase classname="MosaferTest" name="contactNumber" time="0.0">
    <ignored/>
  </testcase> <!-- contactNumber -->
  <testcase classname="MosaferTest" name="testCurrency" time="0.0">
    <ignored/>
  </testcase> <!-- testCurrency -->
</testsuite> <!-- Default test -->
